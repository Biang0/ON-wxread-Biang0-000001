name: wxread

on:
  schedule:
    - cron: '00 14 * * *'         # 北京22:00
    - cron: '0 21 * * *'          # 北京5:00
    - cron: '40 3 * * *'          # 北京11:40
    - cron: '0 9 * * sat,sun'     # 周末17:00
    - cron: '0 0 * * 1'           # 周一8:00
  workflow_dispatch:
    inputs:
      mode:
        description: '运行模式 (auto/manual)'
        required: false
        default: 'auto'

jobs:
  wxread-automation:
    runs-on: ubuntu-latest
    environment: AutoRead
    timeout-minutes: 45

    steps:
    - name: 🛠️ 环境初始化
      run: |
        sudo sed -i '1i nameserver 8.8.8.8' /etc/resolv.conf
        sudo sed -i '1i nameserver 8.8.4.4' /etc/resolv.conf
        echo "✅ DNS配置完成 | $(date '+%Y-%m-%d %H:%M:%S')"

    - name: 📚 代码检出
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 🐍 Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 依赖管理
      run: |
        python -m pip install --upgrade pip
        pip install requests==2.32.3 urllib3==2.2.3
        echo "依赖检查: $(pip freeze | grep 'requests&#92;|urllib3')"

    - name: ⏳ 智能延迟
      run: |
        jitter=$(( RANDOM % 1200 ))
        echo "随机延迟: $((jitter / 60))分$((jitter % 60))秒"
        sleep $jitter

    - name: 🎯 条件执行控制
      id: condition-check
      if: |
        github.event_name == 'schedule' && 
        github.event.schedule == '0 0 * * 1'
      run: |
        seed=$(($(date +%s) % 7))
        echo "周随机数: $seed"
        if [ $seed -eq 0 ]; then
          echo "执行标识=true" >> $GITHUB_OUTPUT
        else
          echo "执行标识=false" >> $GITHUB_OUTPUT
        fi

    - name: 🔢 时长生成器
      id: time-generator
      env:
        TRIGGER_MODE: ${{ inputs.mode || 'auto' }}
      run: |
        case "${{ github.event.schedule }}" in
          '0 21 * * *')   # 早间任务
            range=(90 150) ;;
          '40 3 * * *')   # 午间任务
            range=(120 180) ;;
          '00 14 * * *')  # 晚间任务
            range=(120 180) ;;
          '0 9 * * sat,sun') # 周末
            range=(120 180) ;;
          '0 0 * * 1')    # 周随机
            range=(120 240) ;;
          *)              # 默认安全值
            range=(120 180) ;;
        esac

        if [[ "$TRIGGER_MODE" == "manual" ]]; then
          duration=$(shuf -i 90-180 -n 1)
        else
          spread=$((range[1] - range[0]))
          offset=$((RANDOM % (spread + 1)))
          duration=$((range[0] + offset))
        fi

        echo "生成数值: $duration (等效$((duration/2))分钟)"
        echo "READ_DURATION=$duration" >> $GITHUB_ENV

    - name: 🚀 核心执行
      if: |
        (github.event_name != 'schedule') || 
        (github.event.schedule != '0 0 * * 1') || 
        steps.condition-check.outputs.执行标识 == 'true'
      env:
        WXREAD_TOKEN: ${{ secrets.WXREAD_AUTH_TOKEN }}
        EXEC_TIMEOUT: ${{ env.READ_DURATION }}
      run: |
        start_ts=$(date +%s)
        echo "▶️ 开始执行 | 预期时长: ${EXEC_TIMEOUT}秒"
        
        # 模拟执行（替换实际业务逻辑）
        sleep $((EXEC_TIMEOUT / 2))
        
        end_ts=$(date +%s)
        echo "✅ 执行完成 | 实际耗时: $((end_ts - start_ts))秒"

    - name: 📊 结果报告
      if: always()
      run: |
        echo "=== 执行摘要 ==="
        echo "触发方式: ${{ github.event_name }}"
        echo "输入模式: ${{ inputs.mode || 'auto' }}"
        echo "定时规则: ${{ github.event.schedule || '手动触发' }}"
        echo "生成时长: ${{ env.READ_DURATION }}秒"
