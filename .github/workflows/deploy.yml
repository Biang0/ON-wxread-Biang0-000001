name: WXRead-Optimized

on:
  schedule:
    # 北京时间定时任务（UTC+8）
    - cron: '0 21 * * *'    # 早上5:00（UTC 21:00）
      timezone: Asia/Shanghai
    - cron: '45 3 * * *'    # 中午11:45（UTC 03:45）
      timezone: Asia/Shanghai
    - cron: '0 14 * * *'    # 晚上22:00（UTC 14:00）
      timezone: Asia/Shanghai
    - cron: '0 21 * * 0'    # 周日早上5:00（UTC周六21:00）
      timezone: Asia/Shanghai

  workflow_dispatch:
    inputs:
      mode:
        description: '运行模式 (auto/manual)'
        required: false
        default: 'auto'

jobs:
  wxread:
    runs-on: ubuntu-22.04
    environment: Production
    timeout-minutes: 360

    steps:
    # ========== 环境初始化 ==========
    - name: 🌐 网络配置
      run: |
        sudo cp /etc/resolv.conf /etc/resolv.conf.backup
        echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
        echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf

    - name: 📥 检出仓库
      uses: actions/checkout@v4

    # ========== Python环境配置 ==========
    - name: 🐍 设置Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install certifi==2024.8.30 charset-normalizer==3.4.0 idna==3.10 requests==2.32.3 urllib3==2.2.3
        echo "✅ 依赖验证："
        pip list | grep -E 'certifi|requests|urllib3'

    # ========== 任务控制 ==========
    - name: ⏳ 随机延迟
      run: |
        DELAY=$(python -c "import random; print(random.randint(0, 20))")
        echo "生成随机延迟：${DELAY}分钟"
        sleep $(($DELAY * 60))

    - name: 🎰 周日随机检查
      if: |
        github.event_name == 'schedule' &&
        contains(github.event.schedule, '0 21 * * 0')
      run: |
        CHECK=$(python -c "import random; print(random.randint(0, 6))")
        echo "周日触发检查：${CHECK}/6（需为0）"
        if [ $CHECK -ne 0 ]; then
          echo "⏭️ 跳过周日任务"
          exit 0
        fi

    # ========== 核心业务逻辑 ==========
    - name: ⚙️ 生成阅读参数
      run: |
        # 时间范围3.4-4.1小时 → 204-246分钟
        TOTAL_MIN=$(python -c "import random; print(random.randint(204, 246))")
        
        # 阅读间隔参数（秒）
        BASE_INTERVAL=60
        PAUSE_MIN=30
        PAUSE_MAX=120
        
        # 计算操作次数（修正多余字符）
        MAX_OPS=$(( TOTAL_MIN * 60 / (BASE_INTERVAL + PAUSE_MAX) ))
        MIN_OPS=$(( TOTAL_MIN * 60 / (BASE_INTERVAL + PAUSE_MIN) ))

    - name: 🔢 生成READ_NUM
      run: |
        echo "=== 触发事件分析 ==="
        echo "事件类型: ${{ github.event_name }}"
        echo "输入模式: ${{ github.event.inputs.mode }}"
        echo "定时规则: ${{ github.event.schedule }}"

        if [[ "${{ github.event.inputs.mode }}" == "manual" ]]; then
          NUM=$((RANDOM % 91 + 90))
          echo "🕹️ 手动模式 | 范围: 90-180 (45-90分钟)"
        else
          SCHEDULE="${{ github.event.schedule }}"
          echo "实际匹配表达式: [$SCHEDULE]"
          
          case "$SCHEDULE" in
            '0 21 * * *')
              NUM=$((RANDOM % 61 + 90))   # 90-150（45-75分钟）
              echo "🌅 早间任务 | 范围: 90-150" ;;
            '45 3 * * *')
              NUM=$((RANDOM % 61 + 120))  # 120-180（60-90分钟）
              echo "🌞 午间任务 | 范围: 120-180" ;;
            '0 14 * * *')
              NUM=$((RANDOM % 61 + 120))
              echo "🌙 晚间任务 | 范围: 120-180" ;;
            '0 21 * * 0')
              NUM=$((RANDOM % 121 + 120)) # 120-240（60-120分钟）
              echo "🎉 周日特别任务 | 范围: 120-240" ;;
            *)
              NUM=$((RANDOM % 61 + 120))
              echo "⚠️ 未知触发类型 | 启用安全默认值: 120-180" ;;
          esac
        fi

        echo "✅ 最终READ_NUM: $NUM (等效 $((NUM / 2)) 分钟)"
        echo "READ_NUM=$NUM" >> $GITHUB_ENV

    - name: 🚀 执行主程序
      env:
        WXREAD_CURL_BASH: ${{ secrets.WXREAD_CURL_BASH }}
      run: |
        echo "=== 执行参数 ==="
        echo "READ_NUM: ${{ env.READ_NUM }}"
        python main.py
