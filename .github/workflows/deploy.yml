name: wxread

on:
  schedule:
    - cron: '0 14 * * *' 
    - cron: '0 21 * * 1-5' 
    - cron: '40 3 * * 1-5' 
    - cron: '0 9 * * sat,sun' 
    - cron: '0 0 * * sat,sun' 
  workflow_dispatch:
    description: 手动触发微信阅读任务
    inputs:
      mode:
        type: choice
        description: |
          选择运行模式：
          - 自动模式（auto）：按定时任务规则生成随机阅读次数。手动触发且无自定义延迟时，有 0 - 20 分钟随机延迟。
          - 手动模式（manual）：灵活控制阅读时间。
            - 无自定义时间：生成 60 - 120 次随机阅读次数。
            - 有自定义时间：将时间（分钟）×2 作为阅读次数。
        required: true
        default: 'manual'
        options:
          - auto
          - manual
      custom_time:
        type: string
        description: '手动输入阅读时间（分钟，仅手动触发有效），将其×2 作为阅读次数。'
        required: false
      custom_delay:
        type: string
        description: '手动输入延迟时间（分钟，仅手动触发有效），任务延迟执行。'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-22.04
    environment: AutoRead
    steps:
    - name: 🔧 设置 DNS
      run: |
        echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
        echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
        echo "✅ DNS 配置完成"
    - name: 📥 检出仓库
      uses: actions/checkout@v4
    - name: 🐍 设置 Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install certifi==2024.8.30 charset-normalizer==3.4.0 idna==3.10.0 requests==2.32.3 urllib3==2.2.3
        echo "✅ 依赖安装验证：$(pip list | grep requests)"
    - name: ⏱️ 随机延迟（自动模式或计划模式或手动触发 auto 无自定义延迟）
      if: (github.event.inputs.mode == 'auto' && (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.custom_delay == '')))
      run: |
        DELAY=$((RANDOM % 21))
        echo "⏳ 生成的随机延迟：${DELAY} 分钟"
        TOTAL_SECONDS=$((DELAY * 60))
        echo "::group::延迟倒计时"
        for ((i = 0; i <= TOTAL_SECONDS; i++)); do
          REMAINING=$((TOTAL_SECONDS - i))
          MINUTES=$((REMAINING / 60))
          SECONDS=$((REMAINING % 60))
          printf "\r剩余时间: %02d:%02d" "$MINUTES" "$SECONDS"
          sleep 1
        done
        echo -e "\n::endgroup::"
        echo "✅ 延迟执行完成"
    - name: ⏱️ 自定义延迟（手动触发）
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.custom_delay != ''
      run: |
        DELAY=${{ github.event.inputs.custom_delay }}
        echo "⏳ 自定义延迟：${DELAY} 分钟"
        TOTAL_SECONDS=$((DELAY * 60))
        echo "::group::延迟倒计时"
        for ((i = 0; i <= TOTAL_SECONDS; i++)); do
          REMAINING=$((TOTAL_SECONDS - i))
          MINUTES=$((REMAINING / 60))
          SECONDS=$((REMAINING % 60))
          printf "\r剩余时间: %02d:%02d" "$MINUTES" "$SECONDS"
          sleep 1
        done
        echo -e "\n::endgroup::"
        echo "✅ 延迟执行完成"
    - name: 🎲 周随机检查
      if: github.event_name == 'schedule' && github.event.schedule == '0 0 * * sat,sun'
      run: |
        CHECK=$((RANDOM % 7))
        echo "🎲 随机数：$CHECK (需要等于0)"
        if [ $CHECK -ne 0 ]; then
          echo "⏭️ 跳过周随机任务"
          exit 0
        fi
        echo "🎉 触发周随机任务"
    - name: 🔢 生成 READ_NUM
      run: |
        echo "=== 触发事件分析 ==="
        echo "事件类型: ${{ github.event_name }}"
        echo "输入模式: ${{ github.event.inputs.mode }}"
        echo "定时规则: ${{ github.event.schedule }}"
        echo "自定义时间: ${{ github.event.inputs.custom_time }}"
        echo "自定义延迟: ${{ github.event.inputs.custom_delay }}"
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ -n "${{ github.event.inputs.custom_time }}" ]]; then
            NUM=$(( ${{ github.event.inputs.custom_time }} * 2 ))
            echo "🕹️ 手动触发 | 使用自定义时间: ${{ github.event.inputs.custom_time }} 分钟，等效 READ_NUM: $NUM"
          else
            if [[ "${{ github.event.inputs.mode }}" == "manual" ]]; then
              NUM=$((RANDOM % 61 + 60))
              echo "🕹️ 手动模式 | 范围: 60-120 (30-60分钟)"
            else
              SCHEDULE="${{ github.event.schedule }}"
              case "$SCHEDULE" in
                '0 21 * * 1-5')
                  NUM=$((RANDOM % 31 + 130))
                  echo "🌅 早间任务 | 范围: 130-160"
                  ;;
                '40 3 * * 1-5')
                  NUM=$((RANDOM % 31 + 160))
                  echo "🌞 午间任务 | 范围: 160-190"
                  ;;
                '0 14 * * *')
                  NUM=$((RANDOM % 31 + 190))
                  echo "🌙 晚间任务 | 范围: 190-220"
                  ;;
                '0 9 * * sat,sun')
                  NUM=$((RANDOM % 31 + 190))
                  echo "🎉 周末任务 | 范围: 190-220"
                  ;;
                '0 0 * * sat,sun')
                  NUM=$((RANDOM % 61 + 120))
                  echo "🎰 周随机任务 | 范围: 120-180"
                  ;;
                *)
                  NUM=$((RANDOM % 31 + 190))
                  echo "⚠️ 未知触发类型 | 启用安全默认值: 190-220"
                  ;;
              esac
            fi
          fi
        else
          SCHEDULE="${{ github.event.schedule }}"
          case "$SCHEDULE" in
            '0 21 * * 1-5')
              NUM=$((RANDOM % 31 + 130))
              echo "🌅 早间任务 | 范围: 130-160"
              ;;
            '40 3 * * 1-5')
              NUM=$((RANDOM % 31 + 160))
              echo "🌞 午间任务 | 范围: 160-190"
              ;;
            '0 14 * * *')
              NUM=$((RANDOM % 31 + 190))
              echo "🌙 晚间任务 | 范围: 190-220"
              ;;
            '0 9 * * sat,sun')
              NUM=$((RANDOM % 31 + 190))
              echo "🎉 周末任务 | 范围: 190-220"
              ;;
            '0 0 * * sat,sun')
              NUM=$((RANDOM % 61 + 120))
              echo "🎰 周随机任务 | 范围: 120-180"
              ;;
            *)
              NUM=$((RANDOM % 31 + 190))
              echo "⚠️ 未知触发类型 | 启用安全默认值: 190-220"
              ;;
          esac
        fi
        echo "✅ 最终 READ_NUM: $NUM (等效 $((NUM / 2)) 分钟)"
        echo "READ_NUM=$NUM" >> $GITHUB_ENV
    - name: 🚀 执行主程序
      env:
        WXREAD_CURL_BASH: ${{ secrets.WXREAD_CURL_BASH }}
      run: |
        echo "=== 执行参数 ==="
        echo "READ_NUM: ${{ env.READ_NUM }}"
        python main.py    
